#!/bin/bash

# My rc file, include from .profile, .bashrc, and .zshrc like so: . "$HOME/.config/gibrc"

case $- in
  *i*) [ "$GIBRC" ] && echo "Reusing gibrc..." || echo "Using gibrc..." ;;
  *) return ;; # Exit if not running interactively.
esac

### ENV VAR DEFAULTS ###
export XDG_CONFIG_HOME=${XDG_CONFIG_HOME:-"$HOME/.config"} # Config stuff should go here.
c="$XDG_CONFIG_HOME" # Shortcut to the config directory (`v $c/gibrc` to edit this file).
export XDG_CACHE_HOME=${XDG_CACHE_HOME:-"$HOME/.cache"} # Cache stuff should go here.
export XDG_DATA_HOME=${XDG_DATA_HOME:-"$HOME/.local/share"} # Data should go here.
export LESSHISTFILE=${LESSHISTFILE:-"$XDG_CACHE_HOME/less/history"} # Get less to put its history here.
#export INPUTRC=${INPUTRC:-"$XDG_CONFIG_HOME/inputrc"} # inputrc file goes here (unused currently).
export CARGO_HOME=${CARGO_HOME:-"$XDG_DATA_HOME/cargo"} # Cargo goes here.
export RUSTUP_HOME=${RUSTUP_HOME:-"$XDG_DATA_HOME/rustup"} # Rustup goes here.
export ATOM_HOME=${ATOM_HOME:-"$XDG_CONFIG_HOME/atom"} # Atom goes here.
export HISTFILE=${HISTFILE:-"$XDG_CONFIG_HOME/history"} # Set history file location.
export npm_config_devdir=${npm_config_devdir:-"$XDG_CACHE_HOME/node-gyp"} # Set node-gyp download location.
export npm_cache=${npm_cache:-"$XDG_CACHE_HOME/npm"} # Set npm cache location.
export NODE_REPL_HISTORY=${NODE_REPL_HISTORY="$XDG_CACHE_HOME/node_repl_history"} # Set node-gyp download location.
export BABEL_CACHE_PATH=${NODE_REPL_HISTORY="$XDG_CACHE_HOME/babel/cache.json"} # Set babel cache location.

### SHELL SPECIFIC ###
ls --color=auto >/dev/null 2>&1 && alias ls='ls --color=auto' # ls use colour if poss.
[ "$(uname)" = "Darwin" ] && alias ls='ls -G' && alias dl=rmtrash # ls use colour on mac.

GREP_OPTIONS=""
for i in --color=auto "--exclude-dir={.bzr,CVS,.git,.hg,.svn}"; do
  echo | grep $i "" &>/dev/null && GREP_OPTIONS+=" $i"
done
[ "$GREP_OPTIONS" ] && alias grep="grep $GREP_OPTIONS"
unset GREP_OPTIONS


if [ "$ZSH_VERSION" ]; then # zsh specific options.
  export ZDOTDIR="${XDG_CONFIG_HOME}/zsh" # Path to zsh config files.

  HYPHEN_INSENSITIVE="true" # Use hyphen-insensitive completion.
  DISABLE_AUTO_TITLE="true" # Don't mess with shell title.
  fpath+="$XDG_DATA_HOME/zfunc" # Put (or symlink) autocomplete scripts in here.
  fpath+=/usr/local/share/zsh-completions # Homebrew zsh-completions.

  # Already set: interactive autocd monitor promptsubst shinstdin zle
  setopt alwaystoend autopushd completeinword extendedhistory noflowcontrol histexpiredupsfirst histignoredups histignorespace histverify incappendhistory interactivecomments longlistjobs pushdignoredups pushdminus sharehistory prompt_subst

  # Replace oh-my-zsh (just keep the bits I need)
  autoload -U compaudit compinit # Load all stock functions (from $fpath files) called below.

  for i in "$XDG_CONFIG_HOME"/oh-my-zsh/*.zsh; do source "$i"; done

  # Both arrow and path are green if $? == 0, and red otherwise.
  local arrow="%(?:%{$fg_bold[green]%}❯:%{$fg_bold[red]%}❯)%{$reset_color%}" # Green arrow if $? is 0, red otherwise.
  local fullPath="%(?:%{$fg[green]%}%~:%{$fg[red]%}%~)%{$reset_color%}" # Green if $? is 0, red otherwise.

  PROMPT='${arrow} '

  # Prompt has hostname when you're ssh'ed in to a machine.
  if [ "$SSH_CLIENT" -o "$SSH_TTY" ]; then
    PROMPT='%{$fg_bold[magenta]%}%m%{$reset_color%} ${arrow} '
  fi

  # * means directory is dirty (uncommitted changes).
  RPROMPT='${fullPath}$(git_prompt_info)' # Put full path and git info on right of prompt.

  ZSH_THEME_GIT_PROMPT_PREFIX=" %{$fg_bold[blue]%}(%{$fg[red]%}"
  ZSH_THEME_GIT_PROMPT_SUFFIX="%{$reset_color%}"
  ZSH_THEME_GIT_PROMPT_DIRTY="%{$fg[yellow]%}*%{$fg[blue]%})"
  ZSH_THEME_GIT_PROMPT_CLEAN="%{$fg[blue]%})"


  chpwd() { ls; } # Auto ls after changing directory.
  zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}' # Case-insensitive match.
  source "$XDG_DATA_HOME/zsh/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh" || true
  last_if_empty() { [ -z "$BUFFER" ] && zle up-history; zle accept-line; } # See next line.
  zle -N last_if_empty; bindkey '^M' last_if_empty # Empty input repeats last command.
  for i in please po pu rd d afind _ 1 2 3 4 5 6 7 8 9 lsa run-help; do
    alias "$i" >/dev/null && unalias "$i" # Remove unused oh-my-zsh aliases.
  done
  # bindkey -v # Enable vim mode (breaks history search with <Up> so disabled).
  # KEYTIMEOUT=10 # ↳ Key delay of 0.1s (Esc in vim mode is quicker).
  # bindkey -M viins 'kj' vi-cmd-mode # ↳ Map kj -> Esc in vim mode.
elif [ "$BASH_VERSION" ]; then # Bash specific options.
  set -o vi # Vim mode in bash.
  shopt -s autocd # type directory name to cd.
  cs() { cd "$@" && ls; } # cs => cd and ls.
  cd=cs # Used in .. commands below (so .. does `cs ..`).
  bind Space:magic-space 2>/dev/null # !31 autoexpands on space.
  bind 'set completion-ignore-case on' 2>/dev/null # case-insensitive tab completion.
  PS1=' \[\e[32;1m\]\w $ \[\e[0m\]'
fi

### FUNCTIONS ###
exists() { type "$1" >/dev/null 2>&1; } # Check if command exists (is in path).
pathadd() { [ -d "$1" ] && [[ ":$PATH:" != *":$1:"* ]] && PATH="$1${PATH+":$PATH"}"; }
fnd() { find . -iname "*$**"; } # Find by filename (case insensitive).
pth() { # Returns absolute path to file(s) including file name.
  for i in "$@"; do # Args = relative filenames.
    if [ -d "$i" ]; then (pushd "$i" >/dev/null; pwd) # dir.
    elif [ -f "$i" ]; then  # file.
      if [[ $i == */* ]]; then echo "$(pushd ${i%/*} >/dev/null; pwd)/${i##*/}"
      else echo "$(pwd)/$i"; fi; fi
  done
}

### ALIASES ###
alias x=exit # x exits the terminal.
alias c=clear # c clears the terminal screen (can also use Ctrl-L).
alias g=git # Use with commands in $c/git/config for best results.
alias path='echo $PATH' # Single quotes so we echo path at runtime, not alias time.
alias h=history # Shows command history.
alias s="TERM=xterm-256color ssh -oStrictHostKeyChecking=no" # ssh avoiding checking RSA keys.
alias md="mkdir -p"
scpkey() { ssh $1 'mkdir -p ~/.ssh'; scp ~/.ssh/${2:-authorized_keys_scp} $1:~/.ssh/authorized_keys; } # scp key to host.

alias l='ls -lAh' # Hidden, detail, human readable numbers.
alias la='ls -A'  # List hidden files as well.
alias ll='ls -l'  # Gives more detail about files.
[ -z "$cd" ] && cd=cd # We only want cd=cs in bash.
alias ..="$cd .."             # .. -> go up a directory.
alias ...="$cd ../.."             # ↳ go up two directories.
alias ....="$cd ../../.."         # ↳ go up two directories.
alias .....="$cd ../../../.."     # ↳ go up two directories.
alias ......="$cd ../../../../.." # ↳ go up two directories.
alias -- -="$cd -" # - cd's to the last directory.

[ "$TERM_PROGRAM" = Apple_Terminal ] && export TERM=nsterm-256color # Terminal.app terminfo (updated myself).
[ "$TERM_PROGRAM" != Apple_Terminal -a "$TERM" = nsterm-256color ] && export TERM=xterm-256color # Don't use nsterm elsewhere.
{ exists nvim && VIM=nvim; } || { exists vim && VIM=vim; } || VIM=vi # Take what you can get.
alias v=$VIM; export VISUAL=$VIM # Set vim/nvim as the default editor.
ulimit -c unlimited # Allow saving of coredumps.
alias busy='cat /dev/urandom | hexdump -C | grep "ca fe"' # Makes it look like you're busy with important hacker stuff.
[ $(uname) = "Darwin" ] && { alias cpy="pbcopy"; alias pst="pbpaste"; alias o=open; } # Cross-platform copy/paste/open terminal commands.
[ $(uname) = "Linux" ] && { alias cpy="xclip -selection clipboard"; alias pst="xclip -selection clipboard -o"; alias o=xdg-open; }

### APP SPECIFIC ###
pathadd "$HOME/bin" # Put random binaries you want to run in here.
pathadd /usr/local/opt/ncurses/bin # Used on macOS with nsterm terminfo (see above).
pathadd /usr/local/opt/ccache/libexec # Add ccache to the path if installed.

# I don't have nvm autorun on every shell, I us `nv` when I want to start it.
# This also allows me to frequently `make -j4 install` node master, and have
# that as the default (in /usr/local/bin/node).
export npm_config_userconfig="$XDG_CONFIG_HOME/npm/config"
export NVM_DIR="$XDG_DATA_HOME/nvm" # Use nvm.
alias nv='. $NVM_DIR/nvm.sh'  # Start nvm with alias, o/w too much startup cost.

## Rust commands.
alias cn="cargo new --bin"; alias cl="cargo clippy"
alias cb="cargo build"; alias cr="cargo run"; alias ct="cargo test"
alias ctag='ctags -R . $HOME/bin/src/rust' # Populate ctags from rust src.
alias ru=rustup; pathadd "$CARGO_HOME/bin"
alias e=exercism
alias k=kubectl
rs() { for i in $@; do rustc ${i%.rs}.rs; ./${i%.rs}; done; } # Compile/run (rs a.rs b).

# Build node with ninja.
alias bn='export CPPFLAGS=-fdiagnostics-color && ./configure && tools/gyp_node.py -f ninja && ninja -C out/Release && ln -fs out/Release/node node'

### SSH PROMPT ###
alias bashme="PS1='\[\e[35;1m\]\h \n \w $ \[\e[0m\]'" # Manually set bash prompt.
## Set prompt for SSH windows.
if [ "$SSH_CLIENT" -o "$SSH_TTY" ]; then
  if [ "$ZSH_VERSION" ]; then
    : # Do nothing, this is covered in the gib theme in $ZSH_CUSTOM.
  elif [ "$BASH_VERSION" ]; then # assume Bash ## Shell basics.
    PS1='\[\e[35;1m\]\h \n \w $ \[\e[0m\]'
  else
    myshell=dash
    myshell=${myshell:-"$(ls -l /proc/$$/exe | sed 's%.*/%%')"}
    case $0 in
      -ksh) myshell=ksh;;
      -sh) myshell=dash;;
    esac
    if [ "$myshell" = "ksh93" ]; then
      PS1='\E[35;1m '"$(hostname)"' \n $PWD \E[0m $ '
    else
      PS1="$(uname -n)"' $PWD $ '
    fi
  fi
else # Things to only do if we're not in SSH mode.
  # Set key repeat rate if available (Linux only). You probably want something
  # less insane here, like rate 250 30. If you remove the line below, you also
  # need to remove the else above (or replace below line with a single : ).
  if [ "$(uname)" = Linux ]; then
    exists xset && xset r rate 120 45
    export PANEL_FIFO="/tmp/panel-fifo" # Used by bspwm.
  fi
fi

# Basic keys on old shells.
if [ "$myshell" = "ksh93" -o "$myshell" = "ksh" ]; then
  set -o emacs
  alias __A=`echo "\020"`     # up arrow = ^p = back a command.
  alias __B=`echo "\016"`     # down arrow = ^n = down a command.
  alias __C=`echo "\006"`     # right arrow = ^f = forward a character.
  alias __D=`echo "\002"`     # left arrow = ^b = back a character.
  alias __H=`echo "\001"`     # home = ^a = start of line.
  alias __Y=`echo "\6"`       # end = ^e = end of line.
fi

export GIBRC=true # Use this to check for things that should only run once.
